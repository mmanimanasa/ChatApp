{"version":3,"sources":["components/Login.js","components/Signup.js","Pages/HomePage.js","Context/ChatProvider.js","config/ChatLogics.js","components/ChatComponents/ChatLoading.js","components/ChatComponents/UserBadgeItem.js","components/ChatComponents/UserListItem.js","components/ChatComponents/GroupChatModal.js","components/ChatComponents/MyCharts.js","components/ChatComponents/ProfileModal.js","components/ChatComponents/UpdateGroupChatModal.js","components/ChatComponents/ScrollableChat.js","components/ChatComponents/SingleChat.js","components/ChatComponents/ChatBox.js","components/ChatComponents/UserSerach.js","Pages/ChatPage.js","App.js","reportWebVitals.js","index.js"],"names":["Login","name","setName","useState","email","setEmail","show","setShow","password","setPassword","loading","setLoading","toast","useToast","history","useHistory","React","createElement","VStack","spacing","FormControl","id","isRequired","FormLabel","Input","value","type","placeholder","onChange","e","target","InputGroup","size","InputRightElement","width","Button","h","onClick","handleClick","colorScheme","style","marginTop","async","title","status","duration","isClosable","position","config","headers","Content-type","data","axios","post","localStorage","setItem","JSON","stringify","push","error","description","response","message","isLoading","variant","Signup","confirmpassword","setConfirmpassword","console","log","HomePage","useEffect","parse","getItem","Container","maxW","centerContent","Box","d","justifyContent","p","bg","w","m","borderRadius","borderWidth","Text","fontSize","fontFamily","color","Tabs","isFitted","TabList","mb","Tab","TabPanels","TabPanel","ChatContext","createContext","ChatState","useContext","ChatProvider","_ref","children","user","setuser","selectedChat","setSelectedChat","chats","setChats","notification","setNotification","userInfo","Provider","isSameSenderMargin","messages","i","userId","length","sender","_id","isSameUser","getSender","loggedUser","users","_users$","getSenderFull","ChatLoading","Stack","Skeleton","height","UserBadgeItem","handleFunction","admin","Badge","px","py","cursor","CloseIcon","pl","UserListItem","_hover","background","display","alignItems","Avatar","mr","src","pic","GroupChatModal","isOpen","onOpen","onClose","useDisclosure","groupChatName","setGroupChatName","selectedUsers","setSelectedUsers","search","setSearch","searchResult","setSearchResult","Fragment","Modal","isCentered","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","flexDir","query","Authorization","token","get","handleSearch","flexWrap","map","u","key","delUser","filter","sel","handleDelete","slice","userToAdd","includes","handleGroup","ModalFooter","MyChats","fetchAgain","setLoggedUser","fetchChats","base","md","pb","lg","rightIcon","AddIcon","overflowY","chat","isGroupChat","chatName","latestMessage","content","substring","ProfileModal","IconButton","icon","ViewIcon","Image","boxSize","alt","UpdateGroupChatModal","fetchMessages","setFetchAgain","renameloading","setRenameLoading","handleAddUser","find","user1","groupAdmin","put","chatId","handleRemove","ml","Spinner","ScrollableChat","ScrollableFeed","isSameSender","undefined","isLastMessage","Tooltip","label","placement","hasArrow","mt","backgroundColor","marginLeft","padding","maxWidth","socket","selectedChatCompare","SingleChat","setMessages","newMessage","setnewMessage","socketConnected","setSocketConnected","typing","setTyping","isTyping","setIsTyping","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","emit","io","on","newMessageRecieved","ArrowBackIcon","toUpperCase","overflow","alignSelf","margin","className","onKeyDown","event","Lottie","options","marginBottom","lastTypingTime","Date","getTime","setTimeout","ChatBox","UserSerach","loadingChat","setLoadingChat","accessChat","c","fontWeight","fontStyle","Menu","MenuButton","BellIcon","MenuList","notif","MenuItem","n","as","ChevronDownIcon","logoutHandler","removeItem","Drawer","DrawerOverlay","DrawerContent","DrawerHeader","borderBottomWidth","DrawerBody","paddingBottom","ChatPage","MyCharts","App","Route","path","component","Homepage","exact","Chatpage","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","ChakraProvider","BrowserRouter","document","getElementById"],"mappings":"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","file":"static/js/main.b39b6118.chunk.js","sourcesContent":["import React from 'react'\r\nimport { useState } from \"react\"\r\nimport { Button,VStack,FormControl, FormLabel,Input, InputGroup, InputRightElement,useToast} from \"@chakra-ui/react\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport axios from \"axios\"\r\nconst Login = () => {\r\n  const [name, setName] = useState();\r\n  const [email, setEmail] = useState();\r\n  const [show, setShow] = useState(false);\r\n  const [password, setPassword] = useState();\r\n  const [loading, setLoading] = useState(false);\r\n  const handleClick = () => setShow(!show);\r\n  const toast = useToast();\r\n  const history = useHistory();\r\n  const submitHandler = async() => {\r\n    setLoading(true);\r\n    if (!email || !password) {\r\n        toast({\r\n          title: \"Please Fill all the Feilds\",\r\n          status: \"warning\",\r\n          duration: 5000,\r\n          isClosable: true,\r\n          position: \"bottom\",\r\n        });\r\n        setLoading(false);\r\n        return;\r\n      }\r\n      try {\r\n        const config = {\r\n          headers: {\r\n            \"Content-type\": \"application/json\",\r\n          },\r\n        };\r\n  \r\n        const { data } = await axios.post(\r\n          \"/api/user/login\",\r\n          { email, password },\r\n          config\r\n        );\r\n  \r\n        toast({\r\n          title: \"Login Successful\",\r\n          status: \"success\",\r\n          duration: 5000,\r\n          isClosable: true,\r\n          position: \"bottom\",\r\n        });\r\n        //setUser(data);\r\n        localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n        setLoading(false);\r\n        history.push(\"/chats\");\r\n      } catch (error) {\r\n        toast({\r\n          title: \"Error Occured!\",\r\n          description: error.response.data.message,\r\n          status: \"error\",\r\n          duration: 5000,\r\n          isClosable: true,\r\n          position: \"bottom\",\r\n        });\r\n        setLoading(false);\r\n      }\r\n  }\r\n  return (\r\n    <VStack spacing=\"10px\">\r\n    <FormControl id=\"email\" isRequired>\r\n      <FormLabel>Email Address</FormLabel>\r\n      <Input\r\n        value={email}\r\n        type=\"email\"\r\n        placeholder=\"Enter Your Email Address\"\r\n        onChange={(e) => setEmail(e.target.value)}\r\n      />\r\n    </FormControl>\r\n    <FormControl id=\"password\" isRequired>\r\n      <FormLabel>Password</FormLabel>\r\n      <InputGroup size=\"md\">\r\n        <Input\r\n          value={password}\r\n          onChange={(e) => setPassword(e.target.value)}\r\n          type={show ? \"text\" : \"password\"}\r\n          placeholder=\"Enter password\"\r\n        />\r\n        <InputRightElement width=\"4.5rem\">\r\n          <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\r\n            {show ? \"Hide\" : \"Show\"}\r\n          </Button>\r\n        </InputRightElement>\r\n      </InputGroup>\r\n    </FormControl>\r\n    <Button\r\n      colorScheme=\"green\"\r\n      width=\"100%\"\r\n      style={{ marginTop: 15 }}\r\n      onClick={submitHandler}\r\n      isLoading={loading}\r\n    >\r\n      Login\r\n    </Button>\r\n    <Button\r\n      variant=\"solid\"\r\n      colorScheme=\"blue\"\r\n      width=\"100%\"\r\n      onClick={() => {\r\n        setEmail(\"guest@example.com\");\r\n        setPassword(\"123456\");\r\n      }}\r\n    >\r\n      Get Guest User Credentials\r\n    </Button>\r\n  </VStack>\r\n  )\r\n}\r\n\r\nexport default Login","import React from 'react'\r\nimport { useState } from \"react\"\r\nimport { Button,VStack,FormControl, FormLabel,Input, InputGroup, InputRightElement,useToast} from \"@chakra-ui/react\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport axios from \"axios\"\r\nconst Signup = () => {\r\n  const [name, setName] = useState();\r\n  const [email, setEmail] = useState();\r\n  const [show, setShow] = useState(false);\r\n  const [password, setPassword] = useState();\r\n  const [confirmpassword, setConfirmpassword] = useState();\r\n  const handleClick = () => setShow(!show);\r\n  const toast = useToast();\r\n  const history = useHistory()\r\n  const submitHandler = async() => {\r\n    if (!name || !email || !password || !confirmpassword) {\r\n      toast({\r\n        title: \"Please Fill all the Feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n    if (password !== confirmpassword) {\r\n      toast({\r\n        title: \"Passwords Do Not Match\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n      };\r\n      const { data } = await axios.post(\r\n        \"/api/user\",\r\n        {\r\n          name,\r\n          email,\r\n          password,\r\n        },\r\n        config\r\n      );\r\n      console.log(data);\r\n      toast({\r\n        title: \" Successful Registration\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n      history.push(\"/chats\");\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  }\r\n  return (\r\n    <VStack spacing=\"5px\">\r\n      <FormControl id=\"first-name\" isRequired>\r\n        <FormLabel>Name</FormLabel>\r\n        <Input\r\n          placeholder=\"Enter Your Name\"\r\n          onChange={(e) => setName(e.target.value)}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"email\" isRequired>\r\n        <FormLabel>Email Address</FormLabel>\r\n        <Input\r\n          type=\"email\"\r\n          placeholder=\"Enter Your Email Address\"\r\n          onChange={(e) => setEmail(e.target.value)}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"password\" isRequired>\r\n        <FormLabel>Password</FormLabel>\r\n        <InputGroup size=\"md\">\r\n          <Input\r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Enter Password\"\r\n            onChange={(e) => setPassword(e.target.value)}\r\n          />\r\n          <InputRightElement width=\"4.5rem\">\r\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\r\n              {show ? \"Hide\" : \"Show\"}\r\n            </Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n      <FormControl id=\"password\" isRequired>\r\n        <FormLabel>Confirm Password</FormLabel>\r\n        <InputGroup size=\"md\">\r\n          <Input\r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Confirm password\"\r\n            onChange={(e) => setConfirmpassword(e.target.value)}\r\n          />\r\n          <InputRightElement width=\"4.5rem\">\r\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\r\n              {show ? \"Hide\" : \"Show\"}\r\n            </Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n      <Button\r\n        colorScheme=\"green\"\r\n        width=\"100%\"\r\n        style={{ marginTop: 15 }}\r\n        onClick={submitHandler}\r\n      >\r\n        Sign Up\r\n      </Button>\r\n    </VStack>\r\n  )\r\n}\r\n\r\nexport default Signup","import React from 'react'\r\nimport {Container, Box, Text,Tab,\r\n    TabList,\r\n    TabPanel,\r\n    TabPanels,\r\n    Tabs} from \"@chakra-ui/react\"\r\nimport Login from \"../components/Login\";\r\nimport Signup from \"../components/Signup\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useEffect } from 'react';\r\nconst HomePage = () => {\r\n   const history = useHistory()\r\n      useEffect(() => {\r\n          const user = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n          \r\n  \r\n          if(!user){\r\n              history.push(\"/\")\r\n          }\r\n      },[history])\r\n  return (\r\n     <Container maxW=\"xl\" centerContent>\r\n        <Box\r\n        d=\"flex\"\r\n        justifyContent=\"center\"\r\n        p={3}\r\n        bg={\"white\"}\r\n        w=\"100%\"\r\n        m=\"40px 0 15px 0\"\r\n        borderRadius=\"lg\"\r\n        borderWidth=\"1px\"\r\n        >\r\n            <Text fontSize='4xl' m=\"0 150px\" fontFamily=\"Work sans\" color=\"black\">Chit-Chat</Text>\r\n        </Box>\r\n        <Box bg=\"white\" w=\"100%\" p={4} borderRadius=\"lg\" borderWidth=\"1px\">\r\n        <Tabs isFitted variant=\"soft-rounded\">\r\n          <TabList mb=\"1em\">\r\n            <Tab>Login</Tab>\r\n            <Tab>Sign Up</Tab>\r\n          </TabList>\r\n          <TabPanels>\r\n            <TabPanel>\r\n            <Login/>\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <Signup/>\r\n            </TabPanel>\r\n          </TabPanels>\r\n        </Tabs>\r\n      </Box>\r\n     </Container>\r\n  )\r\n}\r\n\r\nexport default HomePage","import { createContext, useContext, useEffect, useState } from 'react'\r\nimport { useHistory } from 'react-router-dom';\r\nimport React from 'react';\r\nconst ChatContext = createContext();\r\n\r\nconst ChatProvider = ({children}) => {\r\n    const [user, setuser] = useState();\r\n    const [selectedChat, setSelectedChat]=useState();\r\n    const [chats,setChats] = useState([]);\r\n    const [notification, setNotification] = useState([]);\r\n    const history = useHistory()\r\n    useEffect(() => {\r\n        const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n        setuser(userInfo)\r\n\r\n        if(!userInfo){\r\n            history.push(\"/\")\r\n        }\r\n    },[history])\r\n    return <ChatContext.Provider value={{user, setuser, selectedChat, setSelectedChat, chats,setChats, notification,setNotification}}>{children}</ChatContext.Provider>\r\n}\r\nexport const ChatState = () => {\r\n  return useContext(ChatContext);\r\n}\r\n\r\nexport default ChatProvider","export const isSameSenderMargin = (messages, m, i, userId) => {\n  // console.log(i === messages.length - 1);\n\n  if (\n    i < messages.length - 1 &&\n    messages[i + 1].sender._id === m.sender._id &&\n    messages[i].sender._id !== userId\n  )\n    return 33;\n  else if (\n    (i < messages.length - 1 &&\n      messages[i + 1].sender._id !== m.sender._id &&\n      messages[i].sender._id !== userId) ||\n    (i === messages.length - 1 && messages[i].sender._id !== userId)\n  )\n    return 0;\n  else return \"auto\";\n};\n\nexport const isSameSender = (messages, m, i, userId) => {\n  return (\n    i < messages.length - 1 &&\n    (messages[i + 1].sender._id !== m.sender._id ||\n      messages[i + 1].sender._id === undefined) &&\n    messages[i].sender._id !== userId\n  );\n};\n\nexport const isLastMessage = (messages, i, userId) => {\n  return (\n    i === messages.length - 1 &&\n    messages[messages.length - 1].sender._id !== userId &&\n    messages[messages.length - 1].sender._id\n  );\n};\n\nexport const isSameUser = (messages, m, i) => {\n  return i > 0 && messages[i - 1].sender._id === m.sender._id;\n};\n\nexport const getSender = (loggedUser, users) => {\n  return users[0]?._id === loggedUser?._id ? users[1].name : users[0].name;\n};\n\nexport const getSenderFull = (loggedUser, users) => {\n  return users[0]._id === loggedUser._id ? users[1] : users[0];\n};\n","import React from 'react'\r\nimport { Stack } from \"@chakra-ui/react\";\r\nimport { Skeleton } from \"@chakra-ui/react\";\r\nconst ChatLoading = () => {\r\n  return (\r\n    <Stack>\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n    </Stack>\r\n  )\r\n}\r\n\r\nexport default ChatLoading","import { CloseIcon } from \"@chakra-ui/icons\";\r\nimport { Badge } from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\nconst UserBadgeItem = ({ user, handleFunction, admin }) => {\r\n  return (\r\n    <Badge\r\n      px={2}\r\n      py={1}\r\n      borderRadius=\"lg\"\r\n      m={1}\r\n      mb={2}\r\n      variant=\"solid\"\r\n      fontSize={12}\r\n      colorScheme=\"purple\"\r\n      cursor=\"pointer\"\r\n      onClick={handleFunction}\r\n    >\r\n      {user.name}\r\n      {admin === user._id && <span> (Admin)</span>}\r\n      <CloseIcon pl={1} />\r\n    </Badge>\r\n  );\r\n};\r\n\r\nexport default UserBadgeItem;","import { Avatar } from \"@chakra-ui/react\";\r\nimport { Box, Text } from \"@chakra-ui/react\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport React from \"react\";\r\nconst UserListItem = ({ user,handleFunction }) => {\r\n  \r\n\r\n  return (\r\n    <Box\r\n      onClick={handleFunction}\r\n      cursor=\"pointer\"\r\n      bg=\"#E8E8E8\"\r\n      _hover={{\r\n        background: \"#38B2AC\",\r\n        color: \"white\",\r\n      }}\r\n      w=\"100%\"\r\n      display=\"flex\"\r\n      alignItems=\"center\"\r\n      color=\"black\"\r\n      px={3}\r\n      py={2}\r\n      mb={2}\r\n      borderRadius=\"lg\"\r\n    >\r\n      <Avatar\r\n        mr={2}\r\n        size=\"sm\"\r\n        cursor=\"pointer\"\r\n        name={user.name}\r\n        src={user.pic}\r\n      />\r\n      <Box>\r\n        <Text>{user.name}</Text>\r\n        <Text fontSize=\"xs\">\r\n          <b>Email : </b>\r\n          {user.email}\r\n        </Text>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default UserListItem;","import {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  FormControl,\r\n  Input,\r\n  useToast,\r\n  Box,\r\n} from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport UserBadgeItem from \"./UserBadgeItem\";\r\nimport UserListItem from \"./UserListItem\";\r\nimport React ,{Component} from \"react\";\r\nconst GroupChatModal = ({ children }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [groupChatName, setGroupChatName] = useState();\r\n  const [selectedUsers, setSelectedUsers] = useState([]);\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const { user, chats, setChats } = ChatState();\r\n\r\n  const handleGroup = (userToAdd) => {\r\n    if (selectedUsers.includes(userToAdd)) {\r\n      toast({\r\n        title: \"User already added\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    setSelectedUsers([...selectedUsers, userToAdd]);\r\n  };\r\n\r\n  const handleSearch = async (query) => {\r\n    setSearch(query);\r\n    if (!query) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleDelete = (delUser) => {\r\n    setSelectedUsers(selectedUsers.filter((sel) => sel._id !== delUser._id));\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    if (!groupChatName || !selectedUsers) {\r\n      toast({\r\n        title: \"Please fill all the feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.post(\r\n        `/api/chat/group`,\r\n        {\r\n          name: groupChatName,\r\n          users: JSON.stringify(selectedUsers.map((u) => u._id)),\r\n        },\r\n        config\r\n      );\r\n      setChats([data, ...chats]);\r\n      onClose();\r\n      toast({\r\n        title: \"New Group Chat Created!\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Failed to Create the Chat!\",\r\n        description: error.response.data,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <span onClick={onOpen}>{children}</span>\r\n\r\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader\r\n            fontSize=\"35px\"\r\n            fontFamily=\"Work sans\"\r\n            display=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            Create Group Chat\r\n          </ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody display=\"flex\" flexDir=\"column\" alignItems=\"center\">\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Chat Name\"\r\n                mb={3}\r\n                onChange={(e) => setGroupChatName(e.target.value)}\r\n              />\r\n            </FormControl>\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Add Users eg: John\"\r\n                mb={1}\r\n                onChange={(e) => handleSearch(e.target.value)}\r\n              />\r\n            </FormControl>\r\n            <Box w=\"100%\" display=\"flex\" flexWrap=\"wrap\">\r\n              {selectedUsers.map((u) => (\r\n                <UserBadgeItem\r\n                  key={u._id}\r\n                  user={u}\r\n                  handleFunction={() => handleDelete(u)}\r\n                />\r\n              ))}\r\n            </Box>\r\n            {loading ? (\r\n              // <ChatLoading />\r\n              <div>Loading...</div>\r\n            ) : (\r\n              searchResult\r\n                ?.slice(0, 4)\r\n                .map((user) => (\r\n                  <UserListItem\r\n                    key={user._id}\r\n                    user={user}\r\n                    handleFunction={() => handleGroup(user)}\r\n                  />\r\n                ))\r\n            )}\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={handleSubmit} colorScheme=\"blue\">\r\n              Create Chat\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GroupChatModal;","import { AddIcon } from \"@chakra-ui/icons\";\r\nimport { Box, Stack, Text } from \"@chakra-ui/react\";\r\nimport { useToast } from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { getSender } from \"../../config/ChatLogics\";\r\nimport ChatLoading from \"./ChatLoading\";\r\nimport GroupChatModal from \"./GroupChatModal\";\r\nimport { Button } from \"@chakra-ui/react\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport React from \"react\";\r\nconst MyChats = ({ fetchAgain }) => {\r\n  const [loggedUser, setLoggedUser] = useState();\r\n\r\n  const { selectedChat, setSelectedChat, user, chats, setChats } = ChatState();\r\n\r\n  const toast = useToast();\r\n\r\n  const fetchChats = async () => {\r\n    // console.log(user._id);\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.get(\"/api/chat\", config);\r\n      setChats(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the chats\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));\r\n    fetchChats();\r\n    // eslint-disable-next-line\r\n  }, [fetchAgain]);\r\n\r\n  return (\r\n    <Box\r\n      display={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\r\n      flexDir=\"column\"\r\n      alignItems=\"center\"\r\n      p={3}\r\n      bg=\"white\"\r\n      w={{ base: \"100%\", md: \"31%\" }}\r\n      borderRadius=\"lg\"\r\n      borderWidth=\"1px\"\r\n    >\r\n      <Box\r\n        pb={3}\r\n        px={3}\r\n        fontSize={{ base: \"28px\", md: \"30px\" }}\r\n        fontFamily=\"Work sans\"\r\n        display=\"flex\"\r\n        w=\"100%\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n      >\r\n        My Chats\r\n        <GroupChatModal>\r\n          <Button\r\n            d=\"flex\"\r\n            fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\r\n            rightIcon={<AddIcon />}\r\n          >\r\n            New Group Chat\r\n          </Button>\r\n        </GroupChatModal>\r\n      </Box>\r\n      <Box\r\n        display=\"flex\"\r\n        flexDir=\"column\"\r\n        p={3}\r\n        bg=\"#F8F8F8\"\r\n        w=\"100%\"\r\n        h=\"100%\"\r\n        borderRadius=\"lg\"\r\n        overflowY=\"hidden\"\r\n      >\r\n        {chats ? (\r\n          <Stack overflowY=\"scroll\">\r\n            {chats.map((chat) => (\r\n              <Box\r\n                onClick={() => setSelectedChat(chat)}\r\n                cursor=\"pointer\"\r\n                bg={selectedChat === chat ? \"#38B2AC\" : \"#E8E8E8\"}\r\n                color={selectedChat === chat ? \"white\" : \"black\"}\r\n                px={3}\r\n                py={2}\r\n                borderRadius=\"lg\"\r\n                key={chat._id}\r\n              >\r\n                <Text>\r\n                  {!chat.isGroupChat\r\n                    ? getSender(loggedUser, chat.users)\r\n                    : chat.chatName}\r\n                </Text>\r\n                {chat.latestMessage && (\r\n                  <Text fontSize=\"xs\">\r\n                    <b>{chat.latestMessage.sender.name} : </b>\r\n                    {chat.latestMessage.content.length > 50\r\n                      ? chat.latestMessage.content.substring(0, 51) + \"...\"\r\n                      : chat.latestMessage.content}\r\n                  </Text>\r\n                )}\r\n              </Box>\r\n            ))}\r\n          </Stack>\r\n        ) : (\r\n          <ChatLoading />\r\n        )}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default MyChats;","import { ViewIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  IconButton,\r\n  Text,\r\n  Image,\r\n} from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\nconst ProfileModal = ({ user, children }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  \r\n  return (\r\n    <>\r\n      {children ? (\r\n        <span onClick={onOpen}>{children}</span>\r\n      ) : (\r\n        <IconButton display={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\r\n      )}\r\n      <Modal size=\"md\" onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent h=\"410px\">\r\n          <ModalHeader\r\n            fontSize=\"40px\"\r\n            fontFamily=\"Work sans\"\r\n            display=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            {user.name}\r\n          </ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody\r\n            display=\"flex\"\r\n            flexDir=\"column\"\r\n            alignItems=\"center\"\r\n            justifyContent=\"space-between\"\r\n          >\r\n            <Image\r\n              borderRadius=\"full\"\r\n              boxSize=\"150px\"\r\n              src={user.pic}\r\n              alt={user.name}\r\n            />\r\n            <Text\r\n              fontSize={{ base: \"28px\", md: \"30px\" }}\r\n              fontFamily=\"Work sans\"\r\n            >\r\n              Email: {user.email}\r\n            </Text>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={onClose}>Close</Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProfileModal;","import { ViewIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  Modal,ModalOverlay,ModalContent,ModalHeader,ModalFooter,\r\n  ModalBody,ModalCloseButton,Button,useDisclosure,FormControl,\r\n  Input,useToast,Box,IconButton,Spinner,\r\n} from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport UserBadgeItem from \"./UserBadgeItem\";\r\nimport UserListItem from \"./UserListItem\";\r\nimport React from \"react\";\r\nconst UpdateGroupChatModal = ({ fetchMessages, fetchAgain, setFetchAgain }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [groupChatName, setGroupChatName] = useState();\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [renameloading, setRenameLoading] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const { selectedChat, setSelectedChat, user } = ChatState();\r\n\r\n  const handleSearch = async (query) => {\r\n    setSearch(query);\r\n    if (!query) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n      console.log(data);\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleRename = async () => {\r\n    if (!groupChatName) return;\r\n\r\n    try {\r\n      setRenameLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/rename`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          chatName: groupChatName,\r\n        },\r\n        config\r\n      );\r\n\r\n      console.log(data._id);\r\n      setSelectedChat(data);\r\n      setRenameLoading(false);\r\n      setFetchAgain(!fetchAgain);\r\n      \r\n    } catch (error) {\r\n    //   toast({\r\n    //     title: \"Error Occured!\",\r\n    //     description: \"Failed to Update the Name\",\r\n    //     status: \"error\",\r\n    //     duration: 5000,\r\n    //     isClosable: true,\r\n    //     position: \"bottom\",\r\n    //   });\r\n      setRenameLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  const handleAddUser = async (user1) => {\r\n    if (selectedChat.users.find((u) => u._id === user1._id)) {\r\n      toast({\r\n        title: \"User Already in group!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (selectedChat.groupAdmin._id !== user._id) {\r\n      toast({\r\n        title: \"Only admins can add someone!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/groupadd`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          userId: user1._id,\r\n        },\r\n        config\r\n      );\r\n\r\n      setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      setLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Add the User\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  const handleRemove = async (user1) => {\r\n    if (selectedChat.groupAdmin._id !== user._id && user1._id !== user._id) {\r\n      toast({\r\n        title: \"Only admins can remove someone!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/groupremove`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          userId: user1._id,\r\n        },\r\n        config\r\n      );\r\n\r\n      user1._id === user._id ? setSelectedChat() : setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      fetchMessages();\r\n      setLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Remove the User\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <IconButton display={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\r\n\r\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader\r\n            fontSize=\"35px\"\r\n            fontFamily=\"Work sans\"\r\n            display=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            {selectedChat.chatName}\r\n          </ModalHeader>\r\n\r\n          <ModalCloseButton />\r\n          <ModalBody display=\"flex\" flexDir=\"column\" alignItems=\"center\">\r\n            <Box w=\"100%\" display=\"flex\" flexWrap=\"wrap\" pb={3}>\r\n              {selectedChat.users.map((u) => (\r\n                <UserBadgeItem\r\n                  key={u._id}\r\n                  user={u}\r\n                  admin={selectedChat.groupAdmin}\r\n                  handleFunction={() => handleRemove(u)}\r\n                />\r\n              ))}\r\n            </Box>\r\n            <FormControl display=\"flex\">\r\n              <Input\r\n                placeholder=\"Chat Name\"\r\n                mb={3}\r\n                value={groupChatName}\r\n                onChange={(e) => setGroupChatName(e.target.value)}\r\n              />\r\n              <Button\r\n                variant=\"solid\"\r\n                colorScheme=\"teal\"\r\n                ml={1}\r\n                isLoading={renameloading}\r\n                onClick={handleRename}\r\n              >\r\n                Update\r\n              </Button>\r\n            </FormControl>\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Add User to group\"\r\n                mb={1}\r\n                onChange={(e) => handleSearch(e.target.value)}\r\n              />\r\n            </FormControl>\r\n\r\n            {loading ? (\r\n              <Spinner size=\"lg\" />\r\n            ) : (\r\n              searchResult?.map((user) => (\r\n                <UserListItem\r\n                  key={user._id}\r\n                  user={user}\r\n                  handleFunction={() => handleAddUser(user)}\r\n                />\r\n              ))\r\n            )}\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={() => handleRemove(user)} colorScheme=\"red\">\r\n              Leave Group\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UpdateGroupChatModal;","\r\nimport { Avatar } from \"@chakra-ui/react\";\r\nimport { Tooltip } from \"@chakra-ui/react\";\r\nimport ScrollableFeed from \"react-scrollable-feed\";\r\nimport {\r\n  isLastMessage,\r\n  isSameSender,\r\n  isSameSenderMargin,\r\n  isSameUser,\r\n} from \"../../config/ChatLogics\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport React from \"react\";\r\nconst ScrollableChat = ({ messages }) => {\r\n  const { user } = ChatState();\r\n\r\n  return (\r\n    <ScrollableFeed>\r\n      {messages &&\r\n        messages.map((m, i) => (\r\n          <div style={{ display: \"flex\" }} key={m._id}>\r\n            {(isSameSender(messages, m, i, user._id) ||\r\n              isLastMessage(messages, i, user._id)) && (\r\n              <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\r\n                <Avatar\r\n                  mt=\"7px\"\r\n                  mr={1}\r\n                  size=\"sm\"\r\n                  cursor=\"pointer\"\r\n                  name={m.sender.name}\r\n                  src={m.sender.pic}\r\n                />\r\n              </Tooltip>\r\n            )}\r\n            <span\r\n              style={{\r\n                backgroundColor: `${\r\n                  m.sender._id === user._id ? \"#BEE3F8\" : \"#B9F5D0\"\r\n                }`,\r\n                marginLeft: isSameSenderMargin(messages, m, i, user._id),\r\n                marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\r\n                borderRadius: \"20px\",\r\n                padding: \"5px 15px\",\r\n                maxWidth: \"75%\",\r\n              }}\r\n            >\r\n              {m.content}\r\n            </span>\r\n          </div>\r\n        ))}\r\n    </ScrollableFeed>\r\n  );\r\n};\r\n\r\nexport default ScrollableChat;\r\n","import React, { useEffect, useState } from 'react'\r\nimport { ChatState } from '../../Context/ChatProvider'\r\nimport { Box,Center,FormControl,IconButton,Input,Spinner,Text } from '@chakra-ui/react';\r\nimport { ArrowBackIcon } from '@chakra-ui/icons';\r\nimport { getSender,getSenderFull } from '../../config/ChatLogics';\r\nimport ProfileModal from './ProfileModal';\r\nimport UpdateGroupChatModal from './UpdateGroupChatModal';\r\nimport axios from 'axios';\r\nimport { useToast } from \"@chakra-ui/react\";\r\nimport ScrollableChat from './ScrollableChat';\r\nimport io from \"socket.io-client\";\r\nimport \"../Styles/style.css\";\r\nimport Lottie from \"react-lottie\";\r\nimport animationData from \"../Styles/typing.json\"\r\nconst ENDPOINT = \"http://localhost:5000\";\r\nvar socket, selectedChatCompare;\r\nconst SingleChat = ({fetchAgain,setFetchAgain}) => {\r\n  console.log(fetchAgain,\"start\")\r\n    const {user,selectedChat,setSelectedChat,notification,setNotification} = ChatState();\r\n    const [messages,setMessages] = useState([])\r\n    const [loading, setLoading] = useState(false);\r\n    const [newMessage, setnewMessage] = useState();\r\n    const [socketConnected,setSocketConnected] = useState(false)\r\n    const [typing, setTyping] = useState(false)\r\n    const [isTyping, setIsTyping] = useState(false)\r\n    const toast = useToast();\r\n    const defaultOptions = {\r\n      loop: true,\r\n      autoplay: true,\r\n      animationData: animationData,\r\n      rendererSettings: {\r\n        preserveAspectRatio: \"xMidYMid slice\",\r\n      },\r\n    };\r\n    const sendMessage = async (event) => {\r\n      if (event.key === \"Enter\" && newMessage) {\r\n        socket.emit('stop typing', selectedChat._id)\r\n        try {\r\n          const config = {\r\n            headers: {\r\n              \"Content-type\": \"application/json\",\r\n              Authorization: `Bearer ${user.token}`,\r\n            },\r\n          };\r\n          setnewMessage(\"\");\r\n          const { data } = await axios.post(\r\n            \"/api/message\",\r\n            {\r\n              content: newMessage,\r\n              chatId: selectedChat,\r\n            },\r\n            config\r\n          );\r\n          socket.emit(\"new message\", data);\r\n          setMessages([...messages, data]);\r\n        } catch (error) {\r\n          toast({\r\n            title: \"Error Occured!\",\r\n            description: \"Failed to send the Message\",\r\n            status: \"error\",\r\n            duration: 5000,\r\n            isClosable: true,\r\n            position: \"bottom\",\r\n          });\r\n        }\r\n      }\r\n    };\r\n    const fetchMessages = async () => {\r\n      if (!selectedChat) return;\r\n  \r\n      try {\r\n        const config = {\r\n          headers: {\r\n            Authorization: `Bearer ${user.token}`,\r\n          },\r\n        };\r\n  \r\n        setLoading(true);\r\n  \r\n        const { data } = await axios.get(\r\n          `/api/message/${selectedChat._id}`,\r\n          config\r\n        );\r\n        setMessages(data);\r\n        setLoading(false);\r\n        socket.emit(\"join chat\", selectedChat._id);\r\n  \r\n      } catch (error) {\r\n        toast({\r\n          title: \"Error Occured!\",\r\n          description: \"Failed to Load the Messages\",\r\n          status: \"error\",\r\n          duration: 5000,\r\n          isClosable: true,\r\n          position: \"bottom\",\r\n        });\r\n      }\r\n    };\r\n    const typingHandler = (e) => {\r\n      setnewMessage(e.target.value)\r\n      if (!socketConnected) return;\r\n\r\n    if (!typing) {\r\n      setTyping(true);\r\n      socket.emit(\"typing\", selectedChat._id);\r\n    }\r\n    let lastTypingTime = new Date().getTime();\r\n    var timerLength = 3000;\r\n    setTimeout(() => {\r\n      var timeNow = new Date().getTime();\r\n      var timeDiff = timeNow - lastTypingTime;\r\n      if (timeDiff >= timerLength && typing) {\r\n        socket.emit(\"stop typing\", selectedChat._id);\r\n        setTyping(false);\r\n        \r\n      }\r\n    }, timerLength);\r\n    }\r\n    useEffect(() => {\r\n      socket = io(ENDPOINT);\r\n      socket.emit(\"setup\",user);\r\n      socket.on('connected',()=> setSocketConnected(true))\r\n      socket.on(\"typing\", () => setIsTyping(true));\r\n    socket.on(\"stop typing\", () => setIsTyping(false));\r\n    },[])\r\n    useEffect(() => {\r\n      fetchMessages();\r\n  \r\n      selectedChatCompare = selectedChat;  \r\n    }, [selectedChat]);\r\n\r\n    console.log(\"--\",notification);\r\n    useEffect(() => {\r\n      socket.on(\"message recieved\", (newMessageRecieved) => {\r\n        if (\r\n          !selectedChatCompare || \r\n          selectedChatCompare._id !== newMessageRecieved.chat._id\r\n        ) {\r\n          if (!notification.includes(newMessageRecieved)) {\r\n            setNotification([newMessageRecieved, ...notification]);\r\n            console.log(fetchAgain)\r\n            setFetchAgain(!fetchAgain)\r\n        }\r\n      }\r\n         else {\r\n          setMessages([...messages, newMessageRecieved]);\r\n        }\r\n      });\r\n    });\r\n  return (\r\n    \r\n    <>\r\n   \r\n    {selectedChat ? (<>\r\n    <Text fontSize={{ base: \"28px\", md: \"30px\" }}\r\n            pb={3}\r\n            px={2}\r\n            w=\"100%\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent={{ base: \"space-between\" }}\r\n            alignItems=\"center\">\r\n                <IconButton display={{ base: \"flex\", md: \"none\"}}\r\n                icon={<ArrowBackIcon/>}\r\n                onClick={() => setSelectedChat(\"\")}\r\n                />\r\n                {!selectedChat.isGroupChat ? (\r\n                    <>\r\n                    {getSender(user, selectedChat.users)}\r\n                  <ProfileModal\r\n                    user={getSenderFull(user, selectedChat.users)}/>\r\n                    </>\r\n                ):(<>{selectedChat.chatName.toUpperCase()}\r\n                <UpdateGroupChatModal fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} fetchMessages={fetchMessages}/>\r\n                </>)}\r\n            </Text>\r\n            <Box display=\"flex\" flexDir=\"column\" justifyContent=\"flex-end\" p={3} bg=\"#E8E8E8\" w=\"100%\" h=\"100%\" borderRadius=\"lg\" overflow=\"hidden\">\r\n                {loading ? <Spinner size=\"xl\"\r\n                w={20}\r\n                h={20}\r\n                alignSelf=\"center\"\r\n                margin=\"auto\"/>:(\r\n                <div className='messages'  >\r\n                  <ScrollableChat messages={messages}/>\r\n\r\n                </div>\r\n              )}\r\n                <FormControl onKeyDown={sendMessage} isRequired marginTop={3}>\r\n                  {isTyping ? <div><Lottie\r\n                     options={defaultOptions}\r\n                    // height={50}\r\n                    width={70}\r\n                    style={{ marginBottom: 15, marginLeft: 0 }}\r\n                  /></div>: <div></div>}\r\n                  <Input variant=\"filled\"\r\n                bg=\"#E0E0E0\"\r\n                placeholder=\"Enter a message..\"\r\n                value={newMessage}\r\n                onChange={typingHandler}/>\r\n                  </FormControl>\r\n            </Box>\r\n    </>):(\r\n        <Box d=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\r\n        <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\r\n          Click on a user to start chatting\r\n        </Text>\r\n      </Box>\r\n    )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SingleChat","import React from 'react'\r\nimport { ChatState } from '../../Context/ChatProvider';\r\nimport { Box } from '@chakra-ui/react';\r\nimport SingleChat from './SingleChat';\r\nconst ChatBox = ({fetchAgain, setFetchAgain}) => {\r\n  const {selectedChat} = ChatState()\r\n  console.log(fetchAgain)\r\n  return (\r\n    <Box display={{base: selectedChat ? \"flex\" : \"none\" , md:\"flex\"}}\r\n    alignItems={'center'}\r\n    flexDir={'column'}\r\n    padding={3}\r\n    bg={\"white\"}\r\n    w={{ base: \"100%\", md: \"68%\"}}\r\n    borderRadius={\"lg\"}\r\n    borderWidth={\"1px\"}>\r\n      <SingleChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain}/>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default ChatBox","import React, { useState } from 'react'\r\nimport { Spinner,Input,Box, Tooltip, Button,Text,Menu,MenuList, MenuButton, Avatar, MenuItem, Drawer,DrawerBody,DrawerContent,DrawerHeader,DrawerOverlay, Flex } from '@chakra-ui/react'\r\nimport { BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\r\nimport { ChatState } from '../../Context/ChatProvider';\r\nimport ProfileModal from './ProfileModal';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useDisclosure } from \"@chakra-ui/hooks\";\r\nimport { useToast } from '@chakra-ui/react';\r\nimport ChatLoading from './ChatLoading';\r\nimport UserListItem from './UserListItem';\r\nimport axios from \"axios\"\r\nimport { getSender } from '../../config/ChatLogics';\r\nconst UserSerach = () => {\r\n    const [search, setSearch] = useState(\"\")\r\n    const [searchResult, setSearchResult] = useState([])\r\n    const [loading,setLoading] = useState(false)\r\n    const [loadingChat,setLoadingChat] = useState()\r\n    const history = useHistory();\r\n    const { isOpen, onOpen, onClose } = useDisclosure();\r\n\r\n  const logoutHandler = () => {\r\n    localStorage.removeItem(\"userInfo\");\r\n    history.push(\"/\");\r\n  };\r\n  const toast = useToast();\r\n    const {user,selectedChat, setSelectedChat,chats,setChats, notification,setNotification} = ChatState();\r\n    const hadleSearch = async() => {\r\n        if (!search) {\r\n            toast({\r\n              title: \"Please Enter something in search\",\r\n              status: \"warning\",\r\n              duration: 5000,\r\n              isClosable: true,\r\n              position: \"top-left\",\r\n            });\r\n            return;\r\n          }\r\n      \r\n          try {\r\n            setLoading(true);\r\n      \r\n            const config = {\r\n              headers: {\r\n                Authorization: `Bearer ${user.token}`,\r\n              },\r\n            };\r\n      \r\n            const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n            \r\n            setLoading(false);\r\n            setSearchResult(data);\r\n          } catch (error) {\r\n            toast({\r\n              title: \"Error Occured!\",\r\n              description: \"Failed to Load the Search Results\",\r\n              status: \"error\",\r\n              duration: 5000,\r\n              isClosable: true,\r\n              position: \"bottom-left\",\r\n            });\r\n          }\r\n    }\r\n    const accessChat = async(userId) => {\r\n        try {\r\n            setLoadingChat(true);\r\n            const config = {\r\n              headers: {\r\n                \"Content-type\": \"application/json\",\r\n                Authorization: `Bearer ${user.token}`,\r\n              },\r\n            };\r\n            const { data } = await axios.post(`/api/chat`, { userId }, config);\r\n      \r\n            if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\r\n            setSelectedChat(data);\r\n            \r\n            setLoadingChat(false);\r\n            onClose();\r\n          } catch (error) {\r\n            toast({\r\n              title: \"Error fetching the chat\",\r\n              description: error.message,\r\n              status: \"error\",\r\n              duration: 5000,\r\n              isClosable: true,\r\n              position: \"bottom-left\",\r\n            });\r\n          }\r\n    }\r\n  return (\r\n    <>\r\n    <Box display=\"flex\"\r\n    justifyContent=\"space-between\"\r\n    alignItems=\"center\"\r\n    bg=\"white\"\r\n    w=\"100%\"\r\n    p=\"5px 10px 5px 10px\"\r\n    borderWidth=\"5px\">\r\n        <Tooltip label=\"Search User\">\r\n        <Button variant=\"ghost\" onClick={onOpen}>\r\n            <i className=\"fas fa-search\"></i>\r\n            <Text d={{ base: \"none\", md: \"flex\" }} px={4}>\r\n              Search User\r\n            </Text>\r\n          </Button>\r\n          </Tooltip>\r\n          <Text fontSize=\"2xl\" fontWeight=\"bold\" fontStyle=\"italic\" fontFamily=\"Work sans\">\r\n          Chit-Chat\r\n        </Text>\r\n        <div>\r\n            <Menu>\r\n                <MenuButton p={1}>\r\n                    <BellIcon fontSize=\"2xl\" m={1} color={!notification.length ? \"blue.400\" : \"red.400\"} />\r\n                </MenuButton>\r\n                <MenuList pl={2}>\r\n              {!notification.length && \"No New Messages\"}\r\n              {notification.map((notif) => (\r\n                <MenuItem\r\n                  key={notif._id}\r\n                  onClick={() => {\r\n                    setSelectedChat(notif.chat);\r\n                    setNotification(notification.filter((n) => n !== notif));\r\n                  }}\r\n                >\r\n                  {notif.chat.isGroupChat\r\n                    ? `New Message in ${notif.chat.chatName}`\r\n                    : `New Message from ${getSender(user, notif.chat.users)}`}\r\n                </MenuItem>\r\n              ))}\r\n            </MenuList>\r\n            </Menu>\r\n            <Menu>\r\n                <MenuButton as={Button} rightIcon={<ChevronDownIcon/>}>\r\n                <Avatar size={\"sm\"} cursor={\"pointer\"} name={user.name}></Avatar>\r\n                </MenuButton>\r\n                <MenuList>\r\n                    <ProfileModal user={user}> \r\n                        <MenuItem>Profile</MenuItem>\r\n                    </ProfileModal>\r\n                    <MenuItem onClick={logoutHandler}>Logout</MenuItem>\r\n                </MenuList>\r\n            </Menu>\r\n        </div>\r\n    </Box>\r\n    <Drawer placement='left' onClose={onClose} isOpen={isOpen}>\r\n        <DrawerOverlay/>\r\n        <DrawerContent>\r\n            <DrawerHeader borderBottomWidth=\"1px\">Search Users</DrawerHeader>\r\n            <DrawerBody>\r\n                <Box display=\"flex\" paddingBottom={2}>\r\n                <Input\r\n                placeholder=\"Search by name or email\"\r\n                margin={2}\r\n                value={search}\r\n                onChange={(e) => setSearch(e.target.value)}\r\n              />\r\n              <Button onClick={hadleSearch}>Go</Button>\r\n                </Box>\r\n                {loading ? (\r\n              <ChatLoading />\r\n            ) : (\r\n              searchResult?.map((user) => (\r\n                <UserListItem\r\n                  key={user._id}\r\n                  user={user}\r\n                  handleFunction={() => accessChat(user._id)}\r\n                />\r\n              ))\r\n            )}\r\n            {loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\r\n            </DrawerBody>\r\n        </DrawerContent>\r\n\r\n    </Drawer>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default UserSerach","import React, { useEffect, useState } from 'react'\r\nimport { ChatState } from '../Context/ChatProvider'\r\nimport { Box } from '@chakra-ui/react'\r\nimport MyCharts from \"../components/ChatComponents/MyCharts\"\r\nimport ChatBox from '../components/ChatComponents/ChatBox' \r\nimport UserSerach from '../components/ChatComponents/UserSerach'\r\nconst ChatPage = () => {\r\n  const {user} = ChatState();\r\n  const [fetchAgain, setFetchAgain] = useState(false);\r\n  return (\r\n    <div style={{width:'100%'}}>\r\n      {user && <UserSerach/>}\r\n      <Box display=\"flex\"\r\n      justifyContent=\"space-between\" w=\"100%\" h=\"91.5vh\" p=\"10px\">\r\n      {user && (< MyCharts fetchAgain={fetchAgain} />) }\r\n      {user && (<ChatBox fetchAgain={fetchAgain} setFetchAgain={setFetchAgain}/>) }\r\n      </Box>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ChatPage","import \"./App.css\";\nimport Homepage from \"./Pages/HomePage\";\nimport { Route } from \"react-router-dom\";\nimport Chatpage from \"./Pages/ChatPage\"\nimport React, { Component }  from 'react';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Route path=\"/\" component={Homepage} exact />\n      <Route path=\"/chats\" component={Chatpage} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport ChatProvider from \"./Context/ChatProvider\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <ChakraProvider>\n    <BrowserRouter>\n      <ChatProvider>\n        <App />\n      </ChatProvider>\n    </BrowserRouter>\n  </ChakraProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}